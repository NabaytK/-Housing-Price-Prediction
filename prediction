# ðŸ”¹ Step 1: Import Libraries
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error, r2_score

# ðŸ”¹ Step 2: Load Dataset
df = pd.read_csv("housing.csv")

# ðŸ”¹ Step 3: Handle Missing Values
df["total_bedrooms"].fillna(df["total_bedrooms"].median(), inplace=True)  # Fill with median

# ðŸ”¹ Step 4: Convert Categorical Column ("ocean_proximity") to Numeric
df = pd.get_dummies(df, columns=["ocean_proximity"], drop_first=True)

# ðŸ”¹ Step 5: Define Features (X) and Target Variable (y)
X = df.drop("median_house_value", axis=1)  # Remove target column
y = df["median_house_value"]  # Target column

# ðŸ”¹ Step 6: Train-Test Split
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# ðŸ”¹ Step 7: Train Linear Regression Model
model = LinearRegression()
model.fit(X_train, y_train)

# ðŸ”¹ Step 8: Make Predictions
y_pred = model.predict(X_test)

# ðŸ”¹ Step 9: Evaluate Model Performance
mse = mean_squared_error(y_test, y_pred)  # Compute Mean Squared Error
rmse = np.sqrt(mse)  # Take square root manually
r2 = r2_score(y_test, y_pred)  # RÂ² Score

print(f"âœ… RMSE: {rmse}")
print(f"âœ… RÂ² Score: {r2}")

# ðŸ”¹ Step 10: Visualizing Predictions vs Actual Prices
plt.figure(figsize=(8,6))
sns.scatterplot(x=y_test, y=y_pred, alpha=0.6)
plt.xlabel("Actual Prices")
plt.ylabel("Predicted Prices")
plt.title("Actual vs Predicted House Prices")
plt.show()
